// Copyright (c) 2022, NVIDIA CORPORATION.

#include <cudf/strings/udf/dstring.cuh>

using dstring = cudf::strings::udf::dstring;

// supports lower-case conversion for ASCII characters only
__device__ dstring to_lower_a(cudf::string_view const d_str)
{
  dstring result = d_str;
  // ASCII case conversion can be done in-place
  auto ptr = result.data();
  auto end = ptr + result.size_bytes();
  while( ptr < end ) {
    auto chr = *ptr;
    if( chr >= 'A' && chr <= 'Z' )
      chr = chr + 32; // lower-case in the ASCII table
    *ptr++ = chr;
  }
  return result;
}

// supports upper-case conversion for ASCII characters only
__device__ dstring to_upper_a(cudf::string_view const d_str)
{
  dstring result = d_str;
  // ASCII case conversion can be done in-place
  auto ptr = result.data();
  auto end = ptr + result.size_bytes();
  while( ptr < end ) {
    auto chr = *ptr;
    if( chr >= 'a' && chr <= 'z' )
      chr = chr - 32; // upper-case in the ASCII table
    *ptr++ = chr;
  }
  return result;
}

__global__ void udf_kernel( cudf::string_view* d_in_strs, int size, 
                            dstring* d_out_strs, int count )
{
  int tid = (blockDim.x * blockIdx.x) + threadIdx.x;
  if( tid < count )
  {
    dstring out = to_lower_a(d_in_strs[tid]);
    // dstring out = to_upper_a(d_in_strs[tid]);
    d_out_strs[tid] = out;
  }
}
