// Copyright (c) 2022, NVIDIA CORPORATION.

#include <cudf/strings/udf/dstring.cuh>
#include <cudf/strings/udf/split.cuh>

#include "../tests/utilities.cuh"

__global__ void udf_kernel( cudf::string_view* d_in_strs, int size, 
                            cudf::strings::udf::dstring* d_out_strs, int count )
{
    int tid = (blockDim.x * blockIdx.x) + threadIdx.x;
    if( tid > 0 ) return;

    using dstring = cudf::strings::udf::dstring;

    auto const test_data = cudf::string_view{"01 234 56789 ", 13};
    cudf::string_view tokens[4];

    auto token_count = cudf::strings::udf::split(test_data, tokens);
    auto d_str = cudf::strings::udf::join("::", tokens, token_count);
    verify(d_str, cudf::string_view{"01::234::56789", 14}, "split().join('::')");

    token_count = cudf::strings::udf::split(test_data, "4 ", tokens);
    d_str = cudf::strings::udf::join("/", tokens, token_count);
    verify(d_str, cudf::string_view{"01 23/56789 ", 12}, "split('4 ').join('/')");

    token_count = cudf::strings::udf::split(test_data, " ", tokens);
    d_str = cudf::strings::udf::join("xyz", tokens, token_count);
    verify(d_str, cudf::string_view{"01xyz234xyz56789xyz", 19}, "split(' ').join('xyz')");

    d_out_strs[tid] = d_in_strs[tid];
}
