// Copyright (c) 2022, NVIDIA CORPORATION.

#include <cudf/strings/udf/dstring.cuh>

#include "../tests/utilities.cuh"

__global__ void udf_kernel( cudf::string_view* d_in_strs, int size, cudf::strings::udf::dstring* d_out_strs, int count )
{
    int tid = (blockDim.x * blockIdx.x) + threadIdx.x;
    if( tid > 0 ) return;

    using dstring = cudf::strings::udf::dstring;
    auto null_string = cudf::string_view{nullptr,0};

    dstring def;
    verify(def, null_string, "default ctor");

    dstring literal{"hello"};
    verify(literal, cudf::string_view{"hello",5}, "null-terminated ctor" );

    dstring chr_array{"goodbye", 4};
    verify(chr_array, cudf::string_view{"good",4}, "char array ctor");

    dstring chr_str{4, 'X'};
    verify(chr_str, cudf::string_view{"XXXX",4}, "char ctor");

    auto world = cudf::string_view{"world",5};
    dstring d_str{world};
    verify(d_str, world, "string_view ctor");

    dstring copied{d_str};
    verify(copied, d_str, "copy ctor");

    dstring moved{std::move(d_str)};
    verify(moved, copied, "move ctor");
    verify(d_str, null_string, "move ctor arg check");

    d_str = literal;
    verify(d_str, literal, "assignment dstring");

    d_str = world;
    verify(d_str, world, "assignment string_view ");

    moved = std::move(d_str);
    verify(moved, world, "move assignment");
    verify(d_str, null_string, "move assignment arg check");

    d_str.assign(literal);
    verify(d_str, literal, "assign()");
    d_str.assign("abcdefghijklmnopqrstuvwxyz");
    verify(d_str, cudf::string_view{"abcdefghijklmnopqrstuvwxyz",26}, "assign(char*)");
    d_str.assign("abcdefghijklmnopqrstuvwxyz", 10);
    verify(d_str, cudf::string_view{"abcdefghij",10}, "assign(char*,size)");
    d_str.assign(world);
    verify(d_str, world, "assign(string_view)");
    moved.assign(std::move(d_str));
    verify(moved, world, "assign(&&)");
    verify(d_str, null_string, "assign(&&) arg check");

    d_out_strs[tid] = d_in_strs[tid];
}
