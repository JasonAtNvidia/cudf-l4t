// Copyright (c) 2022, NVIDIA CORPORATION.

#include <cudf/strings/udf/dstring.cuh>

#include "../tests/utilities.cuh"

__global__ void udf_kernel( cudf::string_view* d_in_strs, int size, cudf::strings::udf::dstring* d_out_strs, int count )
{
    int tid = (blockDim.x * blockIdx.x) + threadIdx.x;
    if( tid > 0 ) return;

    using dstring = cudf::strings::udf::dstring;

    auto const test_data = cudf::string_view{"0123456789", 10};

    dstring d_str{test_data};

    auto const expected_same = cudf::string_view{"01234 6789", 10};
    d_str.replace(5, 1, 1, ' ');
    verify(d_str, expected_same, "replace(char) same size");
    d_str.replace(5, 1, " ");
    verify(d_str, expected_same, "replace(char*) same size");
    d_str.replace(5, 1, " !", 1);
    verify(d_str, expected_same, "replace(char*,size) same size");
    d_str.replace(5, 1, cudf::string_view{" ", 1});
    verify(d_str, expected_same, "replace(string_view) same size");

    auto const expected_small = cudf::string_view{"01  789", 7};
    d_str = test_data;
    d_str.replace(2, 5, 2, ' ');
    verify(d_str, expected_small, "replace(char) smaller");
    d_str = test_data;
    d_str.replace(2, 5, "  ");
    verify(d_str, expected_small, "replace(char*) smaller");
    d_str = test_data;
    d_str.replace(2, 5, "  !", 2);
    verify(d_str, expected_small, "replace(char*,size) smaller");
    d_str = test_data;
    d_str.replace(2, 5, cudf::string_view{"  ", 2});
    verify(d_str, expected_small, "replace(string_view) smaller");

    auto const expected_large = cudf::string_view{"0     456789", 12};
    d_str = test_data;
    d_str.replace(1, 3, 5, ' ');
    verify(d_str, expected_large, "replace(char) larger");
    d_str = test_data;
    d_str.replace(1, 3, "     ");
    verify(d_str, expected_large, "replace(char*) larger");
    d_str = test_data;
    d_str.replace(1, 3, "     !", 5);
    verify(d_str, expected_large, "replace(char*,size) larger");
    d_str = test_data;
    d_str.replace(1, 3, cudf::string_view{"     ", 5});
    verify(d_str, expected_large, "replace(string_view) larger");

    d_str = test_data;
    d_str.replace(5, -1, "");
    verify(d_str, cudf::string_view{"01234",5}, "replace(5,end)");

    d_str = test_data;
    d_str.replace(5, 0, " ");
    verify(d_str, cudf::string_view{"01234 56789",11}, "replace(5,0)");

    d_str = test_data;
    d_str.replace(-1, -1, " ");
    verify(d_str, d_str, "replace(-1)");
    d_str.replace(45, -1, " ");
    verify(d_str, d_str, "replace(pos>end)");
    d_str.replace(0, -1, " ", -1);
    verify(d_str, d_str, "replace(char*,size<0)");

    d_out_strs[tid] = d_in_strs[tid];
}
