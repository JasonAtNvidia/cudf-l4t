// Copyright (c) 2022, NVIDIA CORPORATION.

#include <cudf/strings/udf/dstring.cuh>
#include <cudf/strings/udf/numeric.cuh>
#include <cudf/strings/udf/strip.cuh>

#include "../tests/utilities.cuh"

__global__ void udf_kernel( cudf::string_view* d_in_strs, int size, cudf::strings::udf::dstring* d_out_strs, int count )
{
  int tid = (blockDim.x * blockIdx.x) + threadIdx.x;
  if( tid > 0 ) return;

  using dstring = cudf::strings::udf::dstring;

  auto empty = cudf::string_view{};
  cudf::string_view tests[] = {
    empty,
    cudf::string_view{" aaa ",5},
    cudf::string_view{"bbb  ",5},
    cudf::string_view{" cccc",5},
    cudf::string_view{" a b c ",7},
    cudf::string_view{"a b c",5},
    cudf::string_view{"   ",3},
    cudf::string_view{"aaaaa",5} };

  auto d_str = cudf::strings::udf::strip(empty);
  verify(d_str, empty, "<empty>");

  d_str = cudf::strings::udf::strip(tests[1]);
  verify(d_str, tests[1].substr(1,3), " aaa ");

  d_str = cudf::strings::udf::strip(tests[2]);
  verify(d_str, tests[2].substr(0,3), "bbb  ");

  d_str = cudf::strings::udf::strip(tests[3]);
  verify(d_str, tests[3].substr(1,4), " cccc");

  d_str = cudf::strings::udf::strip(tests[4]);
  verify(d_str, tests[4].substr(1,5), " a b c ");

  d_str = cudf::strings::udf::strip(tests[5]);
  verify(d_str, tests[5], "a b c");

  d_str = cudf::strings::udf::strip(tests[6]);
  verify(d_str, empty, "<spaces>");

  d_str = cudf::strings::udf::strip(tests[7]);
  verify(d_str, tests[7], "aaaaa");

  auto N = static_cast<int>( sizeof(tests)/sizeof(cudf::string_view) );
  for( int i=0; i < N; ++i ) {
    d_str = cudf::strings::udf::strip(tests[i], " abc");
    dstring name = cudf::strings::udf::to_string(i);
    verify(d_str, empty, name.data());
  }

  d_out_strs[tid] = d_in_strs[tid];
}
